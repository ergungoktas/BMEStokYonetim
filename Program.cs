using BMEStokYonetim.Data;
using BMEStokYonetim.Data.Entities;
using BMEStokYonetim.Services.BackgroundJobs;
using BMEStokYonetim.Services.Iservice;
using BMEStokYonetim.Services.Service;
using Microsoft.AspNetCore.DataProtection;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Quartz;

WebApplicationBuilder builder = WebApplication.CreateBuilder(args);

// ‚úÖ G√ºvenli baƒülantƒ± kontrol√º
string? connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
if (string.IsNullOrWhiteSpace(connectionString))
{
    throw new InvalidOperationException("DefaultConnection baƒülantƒ± dizesi yapƒ±landƒ±rƒ±lmamƒ±≈ü.");
}

// ‚úÖ DbContext ve Factory kaydƒ±
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));

builder.Services.AddDbContextFactory<ApplicationDbContext>(
    options => options.UseSqlServer(connectionString),
    ServiceLifetime.Scoped);

builder.Services.AddDatabaseDeveloperPageExceptionFilter();
builder.Services.AddHttpContextAccessor();

// ‚úÖ Data Protection (kalƒ±cƒ± anahtar deposu)
string keyPath = Path.Combine(
    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
    "BMEStokYonetim_Keys");
builder.Services.AddScoped<ExcelImportService>(); // ‚úÖ Bu satƒ±rƒ± ekle
builder.Services.AddDataProtection()
    .PersistKeysToFileSystem(new DirectoryInfo(keyPath))
    .SetApplicationName("BMEStokYonetim");

// ‚úÖ Servis kayƒ±tlarƒ±
builder.Services.AddScoped<IStockReportService, StockReportService>();
builder.Services.AddScoped<IUserContextService, UserContextService>();
builder.Services.AddScoped<IAssetService, AssetService>();
builder.Services.AddScoped<IProcessService, ProcessService>();
builder.Services.AddScoped<IStockService, StockService>();
builder.Services.AddScoped<IReservationService, ReservationService>();
builder.Services.AddScoped<IWarehouseService, WarehouseService>();
builder.Services.AddScoped<IMaintenanceService, MaintenanceService>();
builder.Services.AddScoped<IRequestService, RequestService>();
builder.Services.AddScoped<IPurchaseService, PurchaseService>();
builder.Services.AddScoped<IFuelService, FuelService>();
builder.Services.AddScoped<IAssetDailyCheckService, AssetDailyCheckService>();


// ‚úÖ Razor ve Blazor ayarlarƒ±
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor()
    .AddCircuitOptions(options => { options.DetailedErrors = true; });

// ‚úÖ Logging ayarlarƒ±
builder.Services.AddLogging(logging =>
{
    _ = logging.ClearProviders();
    _ = logging.AddConsole();
    _ = logging.AddDebug();
    _ = logging.AddFilter("Microsoft.EntityFrameworkCore.Database.Command", LogLevel.Warning);
});

// ‚úÖ Identity ayarlarƒ±
builder.Services.AddDefaultIdentity<ApplicationUser>(options =>
{
    options.SignIn.RequireConfirmedAccount = false;
    options.Password.RequireDigit = false;
    options.Password.RequireLowercase = false;
    options.Password.RequireNonAlphanumeric = false;
    options.Password.RequireUppercase = false;
    options.Password.RequiredLength = 1;
})
.AddRoles<IdentityRole>()
.AddEntityFrameworkStores<ApplicationDbContext>();

// ‚úÖ Cookie y√∂nlendirme hatasƒ± engelleme
builder.Services.ConfigureApplicationCookie(options =>
{
    options.Events.OnRedirectToLogin = context =>
    {
        context.Response.Redirect("/Identity/Account/Login");
        return Task.CompletedTask;
    };
});

// ‚úÖ Quartz job (stok rezervasyon yenileme)
builder.Services.AddQuartz(q =>
{
    JobKey jobKey = new("ReservationJob");
    _ = q.AddJob<ReservationJob>(opts => opts.WithIdentity(jobKey));
    _ = q.AddTrigger(opts => opts
        .ForJob(jobKey)
        .WithIdentity("ReservationJob-trigger")
        .WithCronSchedule("0 5 0 * * ?")); // Her g√ºn 00:05'te
});
builder.Services.AddQuartzHostedService(q => q.WaitForJobsToComplete = true);

WebApplication app = builder.Build();

// ‚úÖ Database migration & seeding
if (app.Environment.IsDevelopment())
{
    using IServiceScope scope = app.Services.CreateScope();
    IDbContextFactory<ApplicationDbContext> factory = scope.ServiceProvider.GetRequiredService<IDbContextFactory<ApplicationDbContext>>();
    ILogger<Program> logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();

    await using ApplicationDbContext db = await factory.CreateDbContextAsync();

    try
    {
        await db.Database.MigrateAsync();
        logger.LogInformation("‚úÖ Database migration completed successfully.");
        logger.LogInformation("üîó Connected DB: {Database}", db.Database.GetDbConnection().Database);
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "‚ùå Migration error: {Message}", ex.Message);
    }
}
else
{
    _ = app.UseExceptionHandler("/Error");
    _ = app.UseHsts();
}

// ‚úÖ Uygulama yapƒ±landƒ±rmasƒ±
app.UseStaticFiles();
app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();

app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

await app.RunAsync();
