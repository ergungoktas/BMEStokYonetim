@page "/yakit/istasyonlar"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<ApplicationDbContext> ContextFactory

<PageTitle>Yakıt İstasyonları</PageTitle>

<h3 class="mb-3">Yakıt İstasyonları (Depolar)</h3>

@if (loading)
{
    <div class="alert alert-info">Yükleniyor...</div>
}
else
{
    @if (!string.IsNullOrWhiteSpace(error))
    {
        <div class="alert alert-danger">@error</div>
    }
    @if (!string.IsNullOrWhiteSpace(success))
    {
        <div class="alert alert-success">@success</div>
    }

    <div class="card card-body mb-3">
        <EditForm Model="@edit" OnValidSubmit="@SaveAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Kod</label>
                    <InputText class="form-control" @bind-Value="edit.Code" />
                </div>
                <div class="col-md-5">
                    <label class="form-label">Ad</label>
                    <InputText class="form-control" @bind-Value="edit.Name" />
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="edit.IsActive" />
                        <label class="form-check-label ms-1">Aktif</label>
                    </div>
                </div>
            </div>

            <div class="mt-3 d-flex gap-2">
                <button class="btn btn-primary" type="submit">
                    @(edit.Id == 0 ? "Ekle" : "Güncelle")
                </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="NewForm">Yeni</button>
            </div>
        </EditForm>
    </div>

    <div class="table-responsive">
        <table class="table table-sm table-striped align-middle">
            <thead>
                <tr>
                    <th style="width: 120px;">Kod</th>
                    <th>Ad</th>
                    <th style="width: 120px;">Durum</th>
                    <th style="width: 160px;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var w in rows)
                {
                    <tr>
                        <td>@w.Code</td>
                        <td>@w.Name</td>
                        <td>
                            @if (w.IsActive)
                            {
                                <span class="badge bg-success">Aktif</span>
                            }
                            else
                            {

                                <span class="badge bg-secondary">Pasif</span>
                            }
                        </td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditRow(w.Id)">Düzenle</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAsync(w.Id)">Sil</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private bool loading = true;
    private string? error;
    private string? success;
    private List<Warehouse> rows = new();
    private Warehouse edit = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        loading = true; error = success = null;
        try
        {
            await using var db = await ContextFactory.CreateDbContextAsync();
            rows = await db.Warehouses
                .OrderBy(x => x.Code)
                .ToListAsync();
        }
        catch (Exception ex) { error = ex.Message; }
        finally { loading = false; }
    }

    private void NewForm()
    {
        edit = new Warehouse { IsActive = true };
    }

    private async Task EditRow(int id)
    {
        await using var db = await ContextFactory.CreateDbContextAsync();
        var entity = await db.Warehouses.FirstOrDefaultAsync(x => x.Id == id);
        if (entity != null)
        {
            edit = new Warehouse
            {
                Id = entity.Id,
                Code = entity.Code,
                Name = entity.Name,
                IsActive = entity.IsActive
            };
        }
        StateHasChanged();
    }

    private async Task SaveAsync()
    {
        error = success = null;

        if (string.IsNullOrWhiteSpace(edit.Code)) { error = "Kod zorunlu."; return; }
        if (string.IsNullOrWhiteSpace(edit.Name)) { error = "Ad zorunlu."; return; }

        try
        {
            await using var db = await ContextFactory.CreateDbContextAsync();

            if (edit.Id == 0)
            {
                db.Warehouses.Add(edit);
            }
            else
            {
                var entity = await db.Warehouses.FirstAsync(x => x.Id == edit.Id);
                entity.Code = edit.Code;
                entity.Name = edit.Name;
                entity.IsActive = edit.IsActive;
            }

            await db.SaveChangesAsync();
            success = "Kayıt kaydedildi.";
            edit = new Warehouse { IsActive = true };
            await LoadAsync();
        }
        catch (Exception ex) { error = ex.Message; }
    }

    private async Task DeleteAsync(int id)
    {
        error = success = null;
        try
        {
            await using var db = await ContextFactory.CreateDbContextAsync();
            var entity = await db.Warehouses.FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null) { error = "Kayıt bulunamadı."; return; }

            db.Warehouses.Remove(entity);
            await db.SaveChangesAsync();
            success = "Kayıt silindi.";
            await LoadAsync();
        }
        catch (Exception ex) { error = ex.Message; }
    }
}
