@page "/yakit/istasyonlar"
@using System.ComponentModel.DataAnnotations
@using BMEStokYonetim.Data.Entities
@using BMEStokYonetim.Services.Iservice
@using Microsoft.AspNetCore.Components.Forms
@inject IFuelService FuelService

<PageTitle>Yakıt İstasyonları</PageTitle>

<h3 class="mb-3">Yakıt İstasyonları</h3>

@if (!string.IsNullOrWhiteSpace(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="row g-3">
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">@((stationModel.IstasyonID == 0 ? "Yeni İstasyon" : "İstasyon Güncelle"))</div>
            <div class="card-body">
                <EditForm Model="stationModel" OnValidSubmit="SaveStationAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Ad</label>
                        <InputText class="form-control" @bind-Value="stationModel.Ad" />
                        <ValidationMessage For="() => stationModel.Ad" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Yakıt Tipi</label>
                        <InputText class="form-control" @bind-Value="stationModel.Tip" />
                        <ValidationMessage For="() => stationModel.Tip" />
                    </div>

                    <div class="d-flex gap-2">
                        <button class="btn btn-primary" type="submit">@(stationModel.IstasyonID == 0 ? "Kaydet" : "Güncelle")</button>
                        <button class="btn btn-secondary" type="button" @onclick="ResetForm">Temizle</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">Kayıtlı İstasyonlar</div>
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Ad</th>
                            <th>Tip</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!stations.Any())
                        {
                            <tr>
                                <td colspan="3" class="text-center">İstasyon bulunamadı.</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (AkaryakitIstasyon station in stations)
                            {
                                <tr>
                                    <td>@station.Ad</td>
                                    <td>@station.Tip</td>
                                    <td class="text-end">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => EditStation(station)">Düzenle</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<AkaryakitIstasyon> stations = new();
    private StationFormModel stationModel = new();
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadStationsAsync();
    }

    private async Task LoadStationsAsync()
    {
        stations = await FuelService.GetStationsAsync();
    }

    private async Task SaveStationAsync()
    {
        try
        {
            AkaryakitIstasyon entity = new()
            {
                IstasyonID = stationModel.IstasyonID,
                Ad = stationModel.Ad,
                Tip = stationModel.Tip
            };

            await FuelService.SaveStationAsync(entity);
            successMessage = stationModel.IstasyonID == 0 ? "İstasyon eklendi." : "İstasyon güncellendi.";
            errorMessage = null;
            await LoadStationsAsync();
            ResetForm();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            successMessage = null;
        }
    }

    private void EditStation(AkaryakitIstasyon station)
    {
        stationModel = new StationFormModel
        {
            IstasyonID = station.IstasyonID,
            Ad = station.Ad,
            Tip = station.Tip
        };
        successMessage = null;
        errorMessage = null;
    }

    private void ResetForm()
    {
        stationModel = new StationFormModel();
        successMessage = null;
        errorMessage = null;
    }

    private class StationFormModel
    {
        public int IstasyonID { get; set; }

        [Required(ErrorMessage = "İstasyon adı zorunludur.")]
        [StringLength(100)]
        public string Ad { get; set; } = string.Empty;

        [Required(ErrorMessage = "Yakıt tipi zorunludur.")]
        [StringLength(20)]
        public string Tip { get; set; } = string.Empty;
    }
}
