@page "/yakit/raporlar"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<ApplicationDbContext> ContextFactory

<PageTitle>Yakıt Raporları</PageTitle>

<h3 class="mb-3">Yakıt Raporları</h3>

@if (loading)
{
    <div class="alert alert-info">Yükleniyor...</div>
}
else
{
    <div class="card card-body mb-3">
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Başlangıç</label>
                <InputText class="form-control" @bind-Value="fromDateStr" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Bitiş</label>
                <InputText class="form-control" @bind-Value="toDateStr" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Depo</label>
                <InputSelect class="form-select" @bind-Value="warehouseId">
                    <option value="">Tümü</option>
                    @foreach (var w in warehouses)
                    {
                        <option value="@w.Id">@w.Code - @w.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-3">
                <label class="form-label">Ürün</label>
                <InputSelect class="form-select" @bind-Value="productId">
                    <option value="">Tümü</option>
                    @foreach (var p in products)
                    {
                        <option value="@p.Id">@p.Code - @p.Name</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="mt-3 d-flex gap-2">
            <button class="btn btn-primary" @onclick="RunQuery">Listele</button>
            <button class="btn btn-outline-secondary" @onclick="ClearFilters">Temizle</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-sm table-striped">
            <thead>
                <tr>
                    <th>Tarih</th>
                    <th>Tür</th>
                    <th>Depo</th>
                    <th>Ürün</th>
                    <th class="text-end">Miktar</th>
                    <th>Birim</th>
                    <th>Belge</th>
                    <th>Açıklama</th>
                    <th>Araç</th>
                    <th>KM</th>
                    <th>Saat</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in rows)
                {
                    <tr>
                        <td>@r.MovementDate.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@r.MovementName</td>
                        <td>@r.WarehouseName</td>
                        <td>@r.ProductName</td>
                        <td class="text-end">@r.Quantity</td>
                        <td>@r.Unit</td>
                        <td>@r.DocumentNumber</td>
                        <td>@r.Description</td>
                        <td>@r.AssetName</td>
                        <td>@r.Km</td>
                        <td>@r.HourMeter</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr class="fw-bold">
                    <td colspan="4" class="text-end">Toplam Giriş</td>
                    <td class="text-end">@totals.TotalIn</td>
                    <td colspan="6"></td>
                </tr>
                <tr class="fw-bold">
                    <td colspan="4" class="text-end">Toplam Çıkış</td>
                    <td class="text-end">@totals.TotalOut</td>
                    <td colspan="6"></td>
                </tr>
                <tr class="fw-bold">
                    <td colspan="4" class="text-end">Net</td>
                    <td class="text-end">@(totals.TotalIn - totals.TotalOut)</td>
                    <td colspan="6"></td>
                </tr>
            </tfoot>
        </table>
    </div>
}

@code {
    private bool loading = true;

    private List<Warehouse> warehouses = new();
    private List<Product> products = new();

    private string? fromDateStr;
    private string? toDateStr;
    private int? warehouseId;
    private int? productId;

    private List<RowDto> rows = new();
    private Totals totals = new();

    protected override async Task OnInitializedAsync()
    {
        await using var db = await ContextFactory.CreateDbContextAsync();

        warehouses = await db.Warehouses
            .Where(x => x.IsActive)
            .OrderBy(x => x.Code)
            .ToListAsync();

        products = await db.Products
            .Where(p => p.IsActive)
            .OrderBy(p => p.Code)
            .ToListAsync();

        loading = false;
    }

    private async Task RunQuery()
    {
        await using var db = await ContextFactory.CreateDbContextAsync();

        var q = db.StockMovements
            .Include(m => m.Product)
            .Include(m => m.SourceWarehouse)
            .Include(m => m.TargetWarehouse)
            .Include(m => m.Asset)
            .AsQueryable();

        if (!string.IsNullOrEmpty(fromDateStr) && DateTime.TryParse(fromDateStr, out var fd))
            q = q.Where(m => m.MovementDate >= fd);

        if (!string.IsNullOrEmpty(toDateStr) && DateTime.TryParse(toDateStr, out var td))
        {
            td = td.Date.AddDays(1).AddTicks(-1);
            q = q.Where(m => m.MovementDate <= td);
        }

        if (warehouseId.HasValue)
            q = q.Where(m => m.SourceWarehouseId == warehouseId || m.TargetWarehouseId == warehouseId);

        if (productId.HasValue)
            q = q.Where(m => m.ProductId == productId);

        var list = await q
            .OrderByDescending(m => m.MovementDate)
            .ToListAsync();

        rows = list.Select(m => new RowDto
        {
            MovementDate = m.MovementDate,
            MovementName = (m.TargetWarehouseId != null && m.SourceWarehouseId == null) ? "Giriş"
                           : (m.SourceWarehouseId != null && m.TargetWarehouseId == null) ? "Çıkış"
                           : "Transfer/Diğer",
            WarehouseName = (m.TargetWarehouse?.Name ?? m.SourceWarehouse?.Name) ?? "-",
            ProductName = m.Product?.Name ?? "-",
            Quantity = m.Quantity,
            Unit = m.Unit.ToString(),
            // enum ise string’e çevir
            DocumentNumber = m.DocumentNumber,
            Description = m.Description,
            AssetName = (m.Asset != null)
                ? $"{m.Asset.Name}{(string.IsNullOrEmpty(m.Asset.PlateNumber) ? "" : $" ({m.Asset.PlateNumber})")}"
                : "",
            Km = m.Km,
            HourMeter = m.HourMeter
        }).ToList();

        totals.TotalIn = list
            .Where(x => x.TargetWarehouseId != null && x.SourceWarehouseId == null)
            .Sum(x => x.Quantity);

        totals.TotalOut = list
            .Where(x => x.SourceWarehouseId != null && x.TargetWarehouseId == null)
            .Sum(x => x.Quantity);
    }

    private void ClearFilters()
    {
        fromDateStr = toDateStr = null;
        warehouseId = productId = null;
        rows = new();
        totals = new();
    }

    private class RowDto
    {
        public DateTime MovementDate { get; set; }
        public string MovementName { get; set; } = "";
        public string WarehouseName { get; set; } = "";
        public string ProductName { get; set; } = "";
        public int Quantity { get; set; }
        public string Unit { get; set; } = "";
        public string? DocumentNumber { get; set; }
        public string? Description { get; set; }
        public string? AssetName { get; set; }
        public int? Km { get; set; }
        public int? HourMeter { get; set; }
    }

    private class Totals
    {
        public int TotalIn { get; set; }
        public int TotalOut { get; set; }
    }
}
