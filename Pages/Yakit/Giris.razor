@page "/yakit/giris"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject IUserContextService UserContext
@inject NavigationManager Nav

<PageTitle>Yakıt Girişi</PageTitle>

<h3 class="mb-3">Yakıt Girişi</h3>

@if (loading)
{
    <div class="alert alert-info">Yükleniyor...</div>
}
else
{
    @if (!string.IsNullOrWhiteSpace(error))
    {
        <div class="alert alert-danger">@error</div>
    }
    @if (!string.IsNullOrWhiteSpace(success))
    {
        <div class="alert alert-success">@success</div>
    }

    <EditForm Model="@model" OnValidSubmit="@HandleSave">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">Depo</label>
                <InputSelect class="form-select" @bind-Value="model.TargetWarehouseId">
                    <option value="0">Seçiniz</option>
                    @foreach (var wh in warehouses)
                    {
                        <option value="@wh.Id">@wh.Code - @wh.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-4">
                <label class="form-label">Ürün</label>
                <InputSelect class="form-select" @bind-Value="SelectedProductId">
                    <option value="0">Seçiniz</option>
                    @foreach (var p in products)
                    {
                        <option value="@p.Id">@p.Code - @p.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-2">
                <label class="form-label">Miktar</label>
                <InputNumber<int> class="form-control" @bind-Value="model.Quantity" />
            </div>

            <div class="col-md-2">
                <label class="form-label">Birim</label>
                <input class="form-control" value="@unitText" disabled />
            </div>

            <div class="col-md-4">
                <label class="form-label">Belge No</label>
                <InputText class="form-control" @bind-Value="model.DocumentNumber" />
            </div>

            <div class="col-md-8">
                <label class="form-label">Açıklama</label>
                <InputText class="form-control" @bind-Value="model.Description" />
            </div>
        </div>

        <div class="mt-3 d-flex gap-2">
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-plus-circle me-1"></i> Girişi Kaydet
            </button>
            <button type="button" class="btn btn-secondary" @onclick="GoHome">Panele Dön</button>
        </div>
    </EditForm>
}

@code {
    private bool loading = true;
    private string? error;
    private string? success;

    private List<Warehouse> warehouses = new();
    private List<Product> products = new();

    private MovementInput model = new();
    private string unitText = "Litre";

    private int SelectedProductId
    {
        get => model.ProductId;
        set
        {
            model.ProductId = value;
            _ = UpdateUnitAsync(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await using var db = await ContextFactory.CreateDbContextAsync();

            warehouses = await db.Warehouses
                .Where(w => w.IsActive)
                .OrderBy(w => w.Code)
                .ToListAsync();

            products = await db.Products
                .Where(p => p.IsActive)
                .OrderBy(p => p.Code)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            error = $"Yükleme hatası: {ex.Message}";
        }
        finally { loading = false; }
    }

    private async Task UpdateUnitAsync(int productId)
    {
        try
        {
            await using var db = await ContextFactory.CreateDbContextAsync();
            var p = await db.Products.FirstOrDefaultAsync(x => x.Id == productId);
            if (p != null)
            {
                unitText = p.Unit.ToString(); // ENUM -> string
            }
        }
        catch { }
        StateHasChanged();
    }

    private async Task HandleSave()
    {
        error = success = null;

        if (model.TargetWarehouseId <= 0) { error = "Depo seçiniz."; return; }
        if (model.ProductId <= 0) { error = "Ürün seçiniz."; return; }
        if (model.Quantity <= 0) { error = "Miktar 0'dan büyük olmalı."; return; }

        try
        {
            await using var db = await ContextFactory.CreateDbContextAsync();

            var product = await db.Products.FirstAsync(x => x.Id == model.ProductId);
            unitText = product.Unit.ToString(); // ENUM -> string

            var userId = UserContext.GetUserId();

            var movement = new StockMovement
            {
                ProductId = model.ProductId,
                Quantity = model.Quantity,
                MovementDate = DateTime.Now,
                Description = model.Description,
                DocumentNumber = model.DocumentNumber,
                SourceWarehouseId = null,
                TargetWarehouseId = model.TargetWarehouseId,
                UserId = userId
            };

            SetMovementUnitFlexible(movement, product);

            db.StockMovements.Add(movement);

            var ws = await db.Set<WarehouseStock>()
                .FirstOrDefaultAsync(s => s.WarehouseId == model.TargetWarehouseId && s.ProductId == model.ProductId);

            if (ws == null)
            {
                ws = new WarehouseStock
                {
                    WarehouseId = model.TargetWarehouseId,
                    ProductId = model.ProductId,
                    Quantity = 0,
                    ReservedQuantity = 0,
                    LastUpdated = DateTime.Now
                };
                db.Add(ws);
            }

            ws.Quantity += model.Quantity;
            ws.LastUpdated = DateTime.Now;

            await db.SaveChangesAsync();
            success = "Yakıt girişi kaydedildi.";
            model = new();
            unitText = "Litre";
        }
        catch (Exception ex)
        {
            error = $"Kayıt hatası: {ex.Message}";
        }
    }

    private static void SetMovementUnitFlexible(StockMovement movement, Product product)
    {
        var prop = typeof(StockMovement).GetProperty("Unit");
        if (prop == null) return;

        var t = prop.PropertyType;
        if (t == typeof(string))
            prop.SetValue(movement, product.Unit.ToString());
        else
            prop.SetValue(movement, product.Unit); // enum ise
    }

    private void GoHome() => Nav.NavigateTo("/");

    private class MovementInput
    {
        public int ProductId { get; set; }
        public int TargetWarehouseId { get; set; }
        public int Quantity { get; set; }
        public string? DocumentNumber { get; set; }
        public string? Description { get; set; }
    }
}
