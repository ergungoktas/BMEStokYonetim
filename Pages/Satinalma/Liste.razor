@page "/satinalma/liste"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using BMEStokYonetim.Services.Iservice
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel

@* Satınalma kalemlerinde Para Birimi (Currency) ve Durum (Status) için TalepDurumu yerine 
   daha spesifik bir enum (SatinalmaDurumu) veya TalepDurumu'nun bulunduğu
   ad alanını burada tanımlamanız gerekebilir.
   Örnek olarak Currency enum'unun BMEStokYonetim.Data.Enums'ta olduğunu varsaydım. *@


@inject ApplicationDbContext _context
@inject IUserContextService userContextService
@inject NavigationManager Navigation

<h3>Satınalma Listesi</h3>

@if (isLoading)
{
    <p><em>Yükleniyor...</em></p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="YeniSatinalma">Yeni Satınalma Oluştur</button>
    </div>

    <div class="card mb-3 p-3">
        <div class="row g-2">
            <div class="col-md-3">
                <label class="form-label small">Satınalma No</label>
                <input type="text" class="form-control form-control-sm" @bind="filterPurchaseNumber" @bind:event="oninput" placeholder="Ara..." />
            </div>
            <div class="col-md-3">
                <label class="form-label small">Tarih</label>
                <input type="date" class="form-control form-control-sm" @bind="filterDate" />
            </div>
            <div class="col-md-3">
                <label class="form-label small">Lokasyon</label>
                <select class="form-select form-select-sm" @bind="filterLocationId">
                    <option value="">Tümü</option>
                    @foreach (var loc in allLocations)
                    {
                        <option value="@loc.Id">@loc.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label small">Durum</label>
                <select class="form-select form-select-sm" @bind="filterStatus">
                    <option value="">Tümü</option>
                    @foreach (TalepDurumu status in Enum.GetValues(typeof(TalepDurumu)))
                    {
                        <option value="@status">@GetEnumDescription(status)</option>
                    }
                </select>
            </div>
        </div>
        <div class="mt-2">
            <button class="btn btn-sm btn-secondary" @onclick="ClearFilters">Filtreleri Temizle</button>
        </div>
    </div>

    @if (!FilteredPurchases.Any())
    {
        <p class="text-muted">Filtreye uygun satınalma bulunmamaktadır.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered align-middle">
                <thead class="table-light">
                    <tr>
                        <th style="width: 15%">Satınalma No</th>
                        <th style="width: 10%">Tarih</th>
                        <th style="width: 15%">Lokasyon</th>
                        <th style="width: 20%">Oluşturan</th>
                        <th style="width: 15%">Durum</th>
                        <th style="width: 25%">İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var purchase in FilteredPurchases)
                    {
                        var genelDurum = GetOverallStatus(purchase);
                        bool isOwner = purchase.CreatedByUserId == currentUserId;

                        <tr class="table-info">
                            <td>@purchase.PurchaseNumber</td>
                            <td>@purchase.PurchaseDate.ToShortDateString()</td>
                            <td>@purchase.Location?.Name</td>
                            <td>@purchase.CreatedByUser?.FullName</td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(genelDurum)">
                                    @GetEnumDescription(genelDurum)
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info me-1" @onclick="() => EditPurchase(purchase.Id)">Görüntüle</button>

                                @if (isOwner && genelDurum == TalepDurumu.Open)
                                {
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => EditPurchase(purchase.Id)">Düzenle</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeletePurchase(purchase.Id)">Sil</button>
                                }
                                else if (!isOwner)
                                {
                                    <span class="text-muted small">Yetki yok</span>
                                }
                            </td>
                        </tr>

                        @if (purchase.Details?.Any() == true)
                        {
                            <tr>
                                <td colspan="6" class="p-0">
                                    <table class="table table-sm table-borderless mb-0">
                                        <thead class="table-secondary">
                                            <tr>
                                                <th style="width: 20%; padding-left: 2rem;">Ürün</th>
                                                <th style="width: 15%">Tedarikçi</th>
                                                <th style="width: 10%">Miktar</th>
                                                <th style="width: 15%">Birim Fiyat</th>
                                                <th style="width: 15%">Para Birimi</th>
                                                <th style="width: 15%">Kalem Durumu</th>
                                                <th style="width: 10%">Toplam</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in purchase.Details)
                                            {
                                                <tr>
                                                    <td style="padding-left: 2rem;">@item.Product?.Name</td>
                                                    <td>@item.Supplier?.CompanyName</td>
                                                    <td>@item.Quantity</td>
                                                    <td>@item.UnitPrice.ToString("N2")</td>
                                                    <td>@GetEnumDescription(item.Currency)</td>
                                                    <td>
                                                        <span class="badge @GetStatusBadgeClass(item.Status)">
                                                            @GetEnumDescription(item.Status)
                                                        </span>
                                                    </td>
                                                    <td>@item.TotalPrice.ToString("N2")</td>
                                                </tr>
                                            }
                                            <tr class="table-light">
                                                <td colspan="6" class="text-end fw-bold">Toplam Tutar:</td>
                                                <td colspan="1" class="fw-bold">@purchase.Details.Sum(d => d.TotalPrice).ToString("N2") ₺</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="mt-2 text-muted">
            Toplam @FilteredPurchases.Count() kayıt gösteriliyor
        </div>
    }
}

@code {
    // Entity'lerinizi burada kullanabilmek için Location ve Currency/Product/Supplier
    // gibi tiplerin Entities veya Enums ad alanında tanımlı olduğunu varsayıyorum.
    private List<Purchase> purchases = new();
    private List<Location> allLocations = new();
    private bool isLoading = true;
    private string? currentUserId;

    // Filtre değişkenleri
    private string filterPurchaseNumber = string.Empty;
    private DateTime? filterDate;
    private int? filterLocationId;
    private TalepDurumu? filterStatus; // Purchase entity'sinde direkt Status olmadığı için genel durum filtresi olarak kullanıldı.

    // --- COMPUTED PROPERTY ---

    private IEnumerable<Purchase> FilteredPurchases
    {
        get
        {
            var filteredList = purchases.AsEnumerable();

            // Satınalma No filtresi
            if (!string.IsNullOrWhiteSpace(filterPurchaseNumber))
            {
                filteredList = filteredList.Where(p => p.PurchaseNumber?.Contains(filterPurchaseNumber, StringComparison.OrdinalIgnoreCase) == true);
            }

            // Tarih filtresi
            if (filterDate.HasValue)
            {
                filteredList = filteredList.Where(p => p.PurchaseDate.Date == filterDate.Value.Date);
            }

            // Lokasyon filtresi
            if (filterLocationId.HasValue && filterLocationId > 0)
            {
                filteredList = filteredList.Where(p => p.LocationId == filterLocationId);
            }

            // Durum filtresi (Genel Duruma göre filtreleme)
            if (filterStatus.HasValue)
            {
                filteredList = filteredList.Where(p => GetOverallStatus(p) == filterStatus);
            }

            return filteredList.OrderByDescending(p => p.PurchaseDate);
        }
    }

    // --- LIFECYCLE VE CRUD İŞLEMLERİ ---

    protected override async Task OnInitializedAsync()
    {
        currentUserId = await userContextService.GetCurrentUserIdAsync();

        // Purchase ve gerekli alt tabloları Include ediyoruz.
        purchases = await _context.Purchases
      .Include(p => p.Location)
      .Include(p => p.CreatedByUser)
      .Include(p => p.Details)
        .ThenInclude(d => d.Product)
      .Include(p => p.Details)
        .ThenInclude(d => d.Supplier) // Tedarikçi bilgisini de ekledik
            .OrderByDescending(p => p.PurchaseDate)
      .ToListAsync();

        allLocations = await _context.Locations.OrderBy(l => l.Name).ToListAsync();

        isLoading = false;
    }

    private void YeniSatinalma() => Navigation.NavigateTo("/satinalma/yeni");
    private void EditPurchase(int id) => Navigation.NavigateTo($"/satinalma/duzenle/{id}");

    private async Task DeletePurchase(int id)
    {
        var purchase = await _context.Purchases
          .Include(p => p.Details)
          .FirstOrDefaultAsync(p => p.Id == id);

        if (purchase != null)
        {
            // Satınalma detaylarını ve ana kaydı sil
            _context.PurchaseDetails.RemoveRange(purchase.Details);
            _context.Purchases.Remove(purchase);
            await _context.SaveChangesAsync();
            purchases.Remove(purchase);
        }
    }

    private void ClearFilters()
    {
        filterPurchaseNumber = string.Empty;
        filterDate = null;
        filterLocationId = null;
        filterStatus = null;
    }

    // --- YARDIMCI METOTLAR ---

    // Tüm satınalma kalemlerinin durumuna göre genel durumu belirler
    private TalepDurumu GetOverallStatus(Purchase purchase)
    {
        if (purchase.Details == null || !purchase.Details.Any())
            return TalepDurumu.Open; // Kalem yoksa 'Açık' kabul edilebilir

        var uniqueStatuses = purchase.Details.Select(i => i.Status).Distinct().ToList();

        // Tüm kalemler aynı durumdaysa o durumu göster
        if (uniqueStatuses.Count == 1)
        {
            return uniqueStatuses.First();
        }
        // Karmaşık durumlar için önceliklendirme
        else
        {
            // Reddedilen varsa genel durum Reddedildi olsun
            if (uniqueStatuses.Contains(TalepDurumu.PurchaseRejected))
                return TalepDurumu.PurchaseRejected;

            // Beklemede olan varsa genel durum Beklemede olsun
            if (uniqueStatuses.Contains(TalepDurumu.PurchasePending))
                return TalepDurumu.PurchasePending;

            // Bir kısmı tamamlanmış, bir kısmı açık ise Kısmen Teslim edildi gibi bir durum dönebilir
            if (uniqueStatuses.Contains(TalepDurumu.Closed) && uniqueStatuses.Contains(TalepDurumu.Open))
                return TalepDurumu.PartialDelivery;

            // Tüm onaylar tamamlandıysa (PurchaseApproved veya Closed) ve hepsi aynı değilse (kısmen teslim/beklemede vs.)
            if (uniqueStatuses.All(s => s == TalepDurumu.PurchaseApproved || s == TalepDurumu.Closed))
                return TalepDurumu.PurchaseApproved; // Veya daha uygun bir karma durum

            return TalepDurumu.Open;
        }
    }

    // TalepDurumu enum'u için badge renklerini belirler
    private string GetStatusBadgeClass(TalepDurumu status)
    {
        return status switch
        {
            TalepDurumu.Open => "bg-info text-white",
            TalepDurumu.Approved => "bg-success",
            TalepDurumu.Rejected => "bg-danger",
            TalepDurumu.PurchasePending => "bg-primary",
            TalepDurumu.PurchaseApproved => "bg-success",
            TalepDurumu.PurchaseRejected => "bg-danger",
            TalepDurumu.PartialDelivery => "bg-warning text-dark",
            TalepDurumu.Closed => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    // Enum'ın Description attribute'unu okur
    private static string GetEnumDescription(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attr = (DescriptionAttribute?)Attribute.GetCustomAttribute(field!, typeof(DescriptionAttribute));
        return attr?.Description ?? value.ToString();
    }
}