@page "/satinalma/yeni"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using BMEStokYonetim.Services.Iservice
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context
@inject IUserContextService userContextService
@inject NavigationManager Navigation
@inject IPurchaseService purchaseService

<h3>Yeni Satınalma Oluştur</h3>

@if (!string.IsNullOrWhiteSpace(formError))
{
    <div class="alert alert-danger">@formError</div>
}
@if (!string.IsNullOrWhiteSpace(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

<!-- 🔹 Lokasyon seçimi -->
<div class="mb-3">
    <label class="form-label fw-bold">Lokasyon Seçin:</label>
    <div class="d-flex flex-wrap gap-2">
        @foreach (var loc in locations)
        {
            <button class="btn @(selectedLocationId == loc.Id ? "btn-primary" : "btn-outline-primary")"
                    @onclick="() => SelectLocation(loc.Id)">
                @loc.Name
            </button>
        }
    </div>
</div>

@if (selectedLocationId != null)
{
    <!-- 🔹 Satınalma Kalemleri -->
    <div class="card mt-3 p-3">
        <h5>1️⃣ Satınalma Kalemleri (Detay Bilgiler)</h5>

        @if (selectedItems.Any())
        {
            <table class="table table-striped align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Ürün</th>
                        <th>Miktar</th>
                        <th>Birim</th>
                        <th>Tedarikçi</th>
                        <th>Birim Fiyat</th>
                        <th>Para Birimi</th>
                        <th>Teslim Tarihi</th>
                        <th>Toplam</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in selectedItems)
                    {
                        <tr>
                            <td>@item.Product?.Name</td>
                            <td>@item.RequestedQuantity</td>
                            <td>@item.Product?.Unit</td>
                            <td>
                                <select class="form-select form-select-sm" @bind="item.SupplierId">
                                    <option value="">Seçiniz</option>
                                    @foreach (var s in suppliers)
                                    {
                                        <option value="@s.Id">@s.CompanyName</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <input type="number" step="0.01" min="0" class="form-control form-control-sm"
                                       @bind="item.UnitPrice" @bind:event="oninput" />
                            </td>
                            <td>
                                <select class="form-select form-select-sm" @bind="item.Currency">
                                    @foreach (CurrencyType c in Enum.GetValues(typeof(CurrencyType)))
                                    {
                                        <option value="@c">@c</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <input type="date" class="form-control form-control-sm" @bind="item.DeliveryDate" />
                            </td>
                            <td>@item.TotalPrice.ToString("N2") @item.Currency</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="text-end fw-bold">
                Genel Toplam: @selectedItems.Sum(i => i.TotalPrice).ToString("N2") 
                @if (selectedItems.Any()) { @selectedItems.First().Currency }
            </div>

            <div class="mt-3">
                <label class="form-label">Satınalma Açıklaması</label>
                <textarea class="form-control" rows="3" @bind="purchaseDescription"
                          placeholder="Satınalma hakkında not ekleyebilirsiniz"></textarea>
            </div>

            <div class="mt-3">
                <button class="btn btn-success" @onclick="CreatePurchase">Satınalma Oluştur</button>
            </div>
        }
        else
        {
            <p class="text-muted">Henüz satınalma kalemi eklenmemiş.</p>
        }
    </div>

    <!-- 🔹 Yönetim Onaylı Talepler -->
    <div class="card mt-4 p-3">
        <h5>2️⃣ Yönetim Onaylı Talepler</h5>

        @if (availableItems.Any())
        {
            <table class="table table-bordered table-striped align-middle">
                <thead class="table-light">
                    <tr>
                        <th></th>
                        <th>Talep No</th>
                        <th>Ürün</th>
                        <th>Birim</th>
                        <th>Miktar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in availableItems)
                    {
                        <tr>
                            <td><input type="checkbox" @bind="item.IsSelected" /></td>
                            <td>@item.Request?.RequestNumber</td>
                            <td>@item.Product?.Name</td>
                            <td>@item.Product?.Unit</td>
                            <td>@item.RequestedQuantity</td>
                        </tr>
                    }
                </tbody>
            </table>

            <button class="btn btn-primary" @onclick="AddSelectedItems">Satınalmaya Ekle</button>
        }
        else
        {
            <p class="text-muted">Bu lokasyona ait onaylı talep kalemi bulunamadı.</p>
        }
    </div>
}

@code {
    private List<Location> locations = new();
    private List<Supplier> suppliers = new();
    private List<RequestItemSelectable> availableItems = new();
    private List<RequestItemSelectable> selectedItems = new();

    private int? selectedLocationId;
    private string? purchaseDescription;
    private string? formError;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        locations = await _context.Locations.OrderBy(l => l.Name).ToListAsync();
        suppliers = await _context.Suppliers.OrderBy(s => s.CompanyName).ToListAsync();
    }

    private async Task SelectLocation(int locId)
    {
        selectedLocationId = locId;
        selectedItems.Clear();
        availableItems.Clear();
        formError = null;
        successMessage = null;

        availableItems = await _context.RequestItems
            .Include(i => i.Product)
            .Include(i => i.Request)
            .Where(i =>
                i.Request!.LocationId == locId &&
                i.Status == TalepDurumu.Approved &&
                i.ApprovalStage == OnayAsamasi.ManagementApproved)
            .Select(i => new RequestItemSelectable
            {
                Id = i.Id,
                ProductId = i.ProductId,
                Product = i.Product,
                Request = i.Request,
                RequestedQuantity = i.RequestedQuantity
            })
            .ToListAsync();
    }

    private void AddSelectedItems()
    {
        var toAdd = availableItems.Where(i => i.IsSelected).ToList();
        foreach (var item in toAdd)
        {
            if (!selectedItems.Any(x => x.Id == item.Id))
                selectedItems.Add(item);
        }
        availableItems.RemoveAll(i => i.IsSelected);
    }

    private async Task CreatePurchase()
    {
        if (!selectedItems.Any())
        {
            formError = "Satınalma oluşturmak için en az bir kalem eklenmelidir.";
            return;
        }

        if (selectedItems.Any(i => i.SupplierId == null))
        {
            formError = "Her kalem için bir tedarikçi seçilmelidir.";
            return;
        }

        string userId = await userContextService.GetCurrentUserIdAsync();
        string purchaseNumber = await purchaseService.GeneratePurchaseNumberAsync(selectedLocationId!.Value);

        var purchase = new Purchase
        {
            PurchaseNumber = purchaseNumber,
            PurchaseDate = DateTime.UtcNow,
            CreatedByUserId = userId,
            LocationId = selectedLocationId!.Value,
            Description = purchaseDescription ?? string.Empty
        };

        _context.Purchases.Add(purchase);
        await _context.SaveChangesAsync();

        foreach (var item in selectedItems)
        {
            _context.PurchaseDetails.Add(new PurchaseDetail
            {
                PurchaseId = purchase.Id,
                ProductId = item.ProductId,
                Quantity = item.RequestedQuantity,
                RequestItemId = item.Id,
                SupplierId = item.SupplierId!.Value,
                UnitPrice = item.UnitPrice,
                Currency = item.Currency,
                DeliveryDate = item.DeliveryDate
            });

            var reqItem = await _context.RequestItems.FindAsync(item.Id);
            if (reqItem != null)
                reqItem.Status = TalepDurumu.PurchasePending;
        }

        await _context.SaveChangesAsync();
        successMessage = $"Satınalma oluşturuldu: {purchaseNumber}";
        selectedItems.Clear();
    }

    private class RequestItemSelectable
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public Product? Product { get; set; }
        public Request? Request { get; set; }
        public int RequestedQuantity { get; set; }
        public bool IsSelected { get; set; }
        public int? SupplierId { get; set; }
        public decimal UnitPrice { get; set; }
        public CurrencyType Currency { get; set; } = CurrencyType.TRY;
        public DateTime? DeliveryDate { get; set; }
        public decimal TotalPrice => RequestedQuantity * UnitPrice;
    }
}
