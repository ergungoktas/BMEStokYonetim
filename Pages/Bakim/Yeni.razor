@page "/bakim/yeni"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using BMEStokYonetim.Helpers
@using BMEStokYonetim.Services.Iservice
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject IMaintenanceService MaintenanceService
@inject IUserContextService UserContext
@inject ApplicationDbContext _context
@inject NavigationManager Nav

<h3 class="mb-3">Yeni Bakım Talebi</h3>

@if (loading)
{
    <div class="alert alert-info">Yükleniyor...</div>
}
else
{
    <EditForm Model="maintenance" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Varlık (Araç / Makine) <span class="text-danger">*</span></label>
                <InputSelect class="form-select" @bind-Value="maintenance.AssetId">
                    <option value="0">-- Varlık Seçiniz --</option>
                    @foreach (var asset in assets)
                    {
                        <option value="@asset.Id">
                            @asset.Name
                            @if (!string.IsNullOrEmpty(asset.PlateNumber))
                            {
                                <text> - @asset.PlateNumber</text>
                            }
                            @if (!string.IsNullOrEmpty(asset.SerialNumber))
                            {
                                <text> (S/N: @asset.SerialNumber)</text>
                            }
                        </option>
                    }
                </InputSelect>
                @if (maintenance.AssetId == 0)
                {
                    <small class="text-muted">Lütfen bakım yapılacak varlığı seçiniz</small>
                }
            </div>

            <div class="col-md-3">
                <label class="form-label">Durum</label>
                <InputSelect @bind-Value="maintenance.Status" class="form-select">
                    @foreach (BakimDurumu s in Enum.GetValues(typeof(BakimDurumu)))
                    {
                        <option value="@s">@s.GetDescription()</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-3">
                <label class="form-label">Talep Tarihi <span class="text-danger">*</span></label>
                <InputDate TValue="DateTime" class="form-control" @bind-Value="maintenance.RequestDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Planlanan Tarih</label>
                <InputDate TValue="DateTime?" class="form-control" @bind-Value="maintenance.PlannedDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Başlama Tarihi</label>
                <InputDate TValue="DateTime?" class="form-control" @bind-Value="maintenance.StartDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Bitiş Tarihi</label>
                <InputDate TValue="DateTime?" class="form-control" @bind-Value="maintenance.EndDate" />
            </div>

            <div class="col-md-12">
                <label class="form-label">Açıklama <span class="text-danger">*</span></label>
                <InputTextArea class="form-control" rows="3" @bind-Value="maintenance.Description"
                               placeholder="Bakım sebebini ve yapılacak işlemleri detaylı olarak açıklayınız..." />
            </div>

            <div class="col-md-12">
                <label class="form-label">Çalışma Notları</label>
                <InputTextArea class="form-control" rows="3" @bind-Value="maintenance.WorkNotes"
                               placeholder="Bakım sırasında yapılan işlemler ve gözlemler..." />
            </div>

            <div class="col-md-4">
                <label class="form-label">İşçilik Saati</label>
                <InputNumber TValue="decimal" class="form-control" @bind-Value="maintenance.LaborHours"
                             placeholder="0.0" step="0.5" />
            </div>

            <div class="col-md-4">
                <label class="form-label">İşçilik Maliyeti (₺)</label>
                <InputNumber TValue="decimal" class="form-control" @bind-Value="maintenance.LaborCost"
                             placeholder="0.00" step="0.01" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Toplam Maliyet (₺)</label>
                <InputNumber TValue="decimal" class="form-control" @bind-Value="maintenance.TotalCost"
                             placeholder="0.00" step="0.01" />
                <small class="text-muted">Boş bırakılırsa işçilik maliyeti otomatik atanır</small>
            </div>
        </div>

        <div class="mt-4 d-flex gap-2">
            <button class="btn btn-success" type="submit" disabled="@(maintenance.AssetId == 0)">
                <i class="bi bi-check-circle me-1"></i> Talebi Kaydet
            </button>
            <button type="button" class="btn btn-secondary" @onclick="GoBack">
                <i class="bi bi-x-circle me-1"></i> İptal
            </button>
        </div>
    </EditForm>
}

@code {
    private Maintenance maintenance = new();
    private List<Asset> assets = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        // Aktif varlıkları yükle
        assets = await _context.Assets
            .Where(a => a.IsActive)
            .OrderBy(a => a.Name)
            .ToListAsync();

        // Varsayılan değerler
        maintenance.Status = BakimDurumu.TalepOlusturuldu;
        maintenance.RequestDate = DateTime.Now;
        maintenance.AssetId = 0; // Seçim yapılmamış

        loading = false;
    }

    private async Task SaveAsync()
    {
        // Varlık seçimi kontrolü
        if (maintenance.AssetId == 0)
        {
            return;
        }

        var userId = await UserContext.GetCurrentUserIdAsync();

        // Toplam maliyet hesaplama
        if (maintenance.TotalCost == 0)
            maintenance.TotalCost = maintenance.LaborCost;

        await MaintenanceService.CreateMaintenanceAsync(maintenance, userId ?? "");

        Nav.NavigateTo("/bakim");
    }

    private void GoBack() => Nav.NavigateTo("/bakim");
}