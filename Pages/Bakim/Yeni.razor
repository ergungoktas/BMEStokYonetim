@page "/bakim/yeni"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using BMEStokYonetim.Data.ViewModels
@using BMEStokYonetim.Services.Iservice
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IMaintenanceService MaintenanceService
@inject IUserContextService UserContextService
@inject NavigationManager Navigation

<h3 class="mb-3">Yeni Bakım / Arıza Kaydı</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (!faultCodes.Any())
{
    <div class="alert alert-warning">
        Henüz arıza kodu tanımlanmamış. Lütfen <a href="/tanimlar/ariza-kodlari" class="alert-link">Tanımlar &gt; Arıza Kodları</a> sayfasından arıza kodu ekleyiniz.
    </div>
}

<EditForm Model="formModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-4">
            <label class="form-label">Varlık</label>
            <InputSelect class="form-select" @bind-Value="formModel.AssetId">
                <option value="0">Varlık Seçiniz</option>
                @foreach (Asset asset in assets)
                {
                    <option value="@asset.Id">@asset.Name</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-4">
            <label class="form-label">Arıza Kodu</label>
            <InputSelect class="form-select" @bind-Value="formModel.FaultCodeId">
                <option value="">Arıza Kodu Seçiniz</option>
                @foreach (FaultCode fault in faultCodes)
                {
                    <option value="@fault.Id">@fault.Code - @fault.Name (@fault.Category)</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-4">
            <label class="form-label">Talep Tarihi</label>
            <InputDate<DateTime> class="form-control" @bind-Value="formModel.RequestDate" />
        </div>
    </div>

    <div class="row g-3 mt-1">
        <div class="col-md-4">
            <label class="form-label">Planlanan Tarih</label>
            <InputDate<DateTime?> class="form-control" @bind-Value="formModel.PlannedDate" />
        </div>
    </div>

    <div class="mt-3">
        <label class="form-label">Arıza Açıklaması</label>
        <InputTextArea class="form-control" Rows="4" @bind-Value="formModel.Description" />
        <div class="form-text">Bakım talebine ilişkin açıklamayı detaylandırabilirsiniz.</div>
    </div>

    <div class="mt-4 d-flex gap-2">
        <button class="btn btn-success" type="submit" disabled="@(isSaving)">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            Kaydet
        </button>
        <button class="btn btn-secondary" type="button" @onclick="() => Navigation.NavigateTo(\"/bakim\")">İptal</button>
    </div>
</EditForm>

@code {
    private MaintenanceFormModel formModel = new();
    private List<Asset> assets = new();
    private List<FaultCode> faultCodes = new();
    private bool isSaving;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        assets = await DbContext.Assets
            .AsNoTracking()
            .OrderBy(a => a.Name)
            .ToListAsync();

        faultCodes = await MaintenanceService.GetFaultCodesAsync();
        formModel.RequestDate = DateTime.UtcNow.Date;
    }

    private async Task HandleSubmit()
    {
        errorMessage = null;
        successMessage = null;

        if (formModel.AssetId <= 0)
        {
            errorMessage = "Lütfen bir varlık seçiniz.";
            return;
        }

        if (!formModel.FaultCodeId.HasValue)
        {
            errorMessage = "Lütfen bir arıza kodu seçiniz.";
            return;
        }

        string? userId = await UserContextService.GetCurrentUserIdAsync();
        if (string.IsNullOrWhiteSpace(userId))
        {
            errorMessage = "Kullanıcı bilgisi alınamadı. Lütfen tekrar giriş yapınız.";
            return;
        }

        isSaving = true;
        try
        {
            Maintenance maintenance = new()
            {
                AssetId = formModel.AssetId,
                FaultCodeId = formModel.FaultCodeId,
                Description = formModel.Description,
                RequestDate = formModel.RequestDate,
                PlannedDate = formModel.PlannedDate,
                Status = BakimDurumu.MaintenancePlanned
            };

            int maintenanceId = await MaintenanceService.CreateMaintenanceAsync(maintenance, userId);
            successMessage = "Bakım talebi başarıyla oluşturuldu.";
            Navigation.NavigateTo($"/bakim/detay/{maintenanceId}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Kayıt sırasında bir hata oluştu: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}
