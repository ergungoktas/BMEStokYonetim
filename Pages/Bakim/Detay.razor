@page "/bakim/detay/{Id:int}"
@using BMEStokYonetim.Data.Entities
@using BMEStokYonetim.Services.Iservice
@using Microsoft.AspNetCore.Components.Forms
@inject IMaintenanceService MaintenanceService
@inject NavigationManager Nav

<h3 class="mb-3">Bakım Detayı</h3>

@if (loading)
{
    <div class="alert alert-info">Yükleniyor...</div>
}
else if (maintenance == null)
{
    <div class="alert alert-warning">Kayıt bulunamadı.</div>
}
else
{
    <!-- ✅ CS1662 fix: async event handler -->
    <EditForm Model="maintenance" OnValidSubmit="async () => await SaveAsync()">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">Varlık</label>
                <input class="form-control" value="@assetName" readonly />
            </div>

            <div class="col-md-4">
                <label class="form-label">Durum</label>
                <InputSelect @bind-Value="maintenance.Status" class="form-select">
                    @foreach (BakimDurumu status in Enum.GetValues(typeof(BakimDurumu)))
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-4">
                <label class="form-label">Talep Tarihi</label>
                <!-- ✅ CS1503 fix: TValue DateTime (modelde nullable değil) -->
                <InputDate TValue="DateTime" class="form-control" @bind-Value="maintenance.RequestDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Planlanan Tarih</label>
                <InputDate TValue="DateTime?" class="form-control" @bind-Value="maintenance.PlannedDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Başlama Tarihi</label>
                <InputDate TValue="DateTime?" class="form-control" @bind-Value="maintenance.StartDate" />
            </div>

            <div class="col-md-4">
                <label class="form-label">Bitiş Tarihi</label>
                <InputDate TValue="DateTime?" class="form-control" @bind-Value="maintenance.EndDate" />
            </div>
        </div>

        <hr />

        <!-- PARÇALAR -->
        <h5>Parçalar</h5>
        <table class="table table-sm align-middle">
            <thead>
                <tr>
                    <th>Ürün</th>
                    <th>Miktar</th>
                    <th>Birim Fiyat (₺)</th>
                    <th>Toplam (₺)</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var part in maintenance.Parts)
                {
                    <tr>
                        <td>@part.ProductId</td>
                        <td>
                            <InputNumber TValue="int" class="form-control form-control-sm" @bind-Value="part.Quantity" />
                        </td>
                        <td>
                            <InputNumber TValue="decimal" class="form-control form-control-sm" @bind-Value="part.UnitCost" />
                        </td>
                        <td>@(part.TotalCost.ToString("N2"))</td>
                        <td>
                            <!-- ✅ CS1662 fix: lambda void dönüş -->
                            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="(() => RemovePart(part))">×</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddPart">Yeni Parça Ekle</button>

        <hr />

        <!-- PERSONEL -->
        <h5>Personel</h5>
        <table class="table table-sm align-middle">
            <thead>
                <tr>
                    <th>Ad</th>
                    <th>Rol</th>
                    <th>Saat</th>
                    <th>Saat Ücret (₺)</th>
                    <th>Toplam (₺)</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in maintenance.Personnels)
                {
                    <tr>
                        <td><InputText class="form-control form-control-sm" @bind-Value="p.PersonnelName" /></td>
                        <td><InputText class="form-control form-control-sm" @bind-Value="p.Role" /></td>
                        <td><InputNumber TValue="decimal" class="form-control form-control-sm" @bind-Value="p.HoursWorked" /></td>
                        <td><InputNumber TValue="decimal" class="form-control form-control-sm" @bind-Value="p.HourlyRate" /></td>
                        <td>@(p.TotalCost.ToString("N2"))</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="(() => RemovePersonnel(p))">×</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddPersonnel">Yeni Personel Ekle</button>

        <hr />

        <div class="row mt-3">
            <div class="col-md-12">
                <label class="form-label">Açıklama</label>
                <InputTextArea class="form-control" rows="3" @bind-Value="maintenance.Description" />
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-success" type="submit">Kaydet</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Geri Dön</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }
    private Maintenance? maintenance;
    private bool loading = true;
    private string assetName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        maintenance = await MaintenanceService.GetMaintenanceFormAsync(Id);

        // ✅ CS8601 fix: null kontrolü eklendi
        if (maintenance != null)
        {
            assetName = await MaintenanceService.GetAssetNameAsync(maintenance.AssetId);

        }

        loading = false;
    }

    private void AddPart()
    {
        maintenance?.Parts.Add(new MaintenancePart
        {
            Quantity = 1,
            UnitCost = 0m,
            ProductId = 0
        });
    }

    private void RemovePart(MaintenancePart part)
    {
        maintenance?.Parts.Remove(part);
    }

    private void AddPersonnel()
    {
        maintenance?.Personnels.Add(new MaintenancePersonnel
        {
            PersonnelName = "",
            HoursWorked = 1m,
            HourlyRate = 0m
        });
    }

    private void RemovePersonnel(MaintenancePersonnel person)
    {
        maintenance?.Personnels.Remove(person);
    }

    private async Task SaveAsync()
    {
        if (maintenance == null)
            return;

        maintenance.TotalCost =
            maintenance.Parts.Sum(x => x.TotalCost) +
            maintenance.Personnels.Sum(x => x.TotalCost);

        await MaintenanceService.SaveMaintenanceAsync(maintenance);
        Nav.NavigateTo("/bakim");
    }

    private void GoBack() => Nav.NavigateTo("/bakim");
}
