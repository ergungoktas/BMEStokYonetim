@page "/depo/yeni"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject ApplicationDbContext _context

<h3>Yeni Depo Oluştur</h3>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Lokasyon</label>
        <InputSelect class="form-select" @bind-Value="selectedLocationId">
            <option value="">Seçiniz</option>
            @foreach (var lok in lokasyonlar)
            {
                <option value="@lok.Id">@lok.Name</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Depo Kodu</label>
        <InputText class="form-control" @bind-Value="model.Code" readonly />
    </div>

    <div class="mb-3">
        <label class="form-label">Depo Adı</label>
        <InputText class="form-control" @bind-Value="model.Name" />
    </div>

    <div class="mb-3">
        <label class="form-label">Depo Tipi</label>
        <InputSelect class="form-select" @bind-Value="model.Type">
            @foreach (var value in Enum.GetValues(typeof(WarehouseType)))
            {
                <option value="@value">@value</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-success">Kaydet</button>
</EditForm>

@code {
    private Warehouse model = new();
    private List<Location> lokasyonlar = new();

    private int? selectedLocationId
    {
        get => model.LocationId;
        set
        {
            if (model.LocationId != value)
            {
                model.LocationId = value;
                _ = GenerateCodeFromLocation();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        lokasyonlar = await _context.Locations.OrderBy(l => l.Name).ToListAsync();
    }

    private async Task GenerateCodeFromLocation()
    {
        if (model.LocationId == null) return;

        var lokasyon = lokasyonlar.FirstOrDefault(l => l.Id == model.LocationId);
        if (lokasyon == null) return;

        string prefix = "BME" + new string(lokasyon.Name
            .Where(char.IsLetter)
            .Take(3)
            .ToArray()).ToUpper();

        var benzerKodlar = await _context.Warehouses
            .Where(w => w.Code.StartsWith(prefix))
            .Select(w => w.Code)
            .ToListAsync();

        int maxSayi = 0;
        foreach (var kod in benzerKodlar)
        {
            if (kod.Length >= prefix.Length + 3 &&
                int.TryParse(kod.Substring(prefix.Length, 3), out int sayi))
            {
                if (sayi > maxSayi) maxSayi = sayi;
            }
        }

        string yeniKod = prefix + (maxSayi + 1).ToString("D3");
        model.Code = yeniKod;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrWhiteSpace(model.Code))
        {
            _context.Warehouses.Add(model);
            await _context.SaveChangesAsync();
            Navigation.NavigateTo("/depolar");
        }
    }
}