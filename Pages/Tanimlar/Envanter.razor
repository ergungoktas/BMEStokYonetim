@page "/tanimlar/asset"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context

<h3>Varlık (Ekipman/Araç) Tanımları</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success">@message</div>
}

<EditForm Model="@model" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-2">
        <div class="col-md-3">
            <InputText class="form-control" placeholder="Adı" @bind-Value="model.Name" />
        </div>

        <div class="col-md-3">
            <InputSelect class="form-select" @bind-Value="model.CategoryId">
                <option value="">Kategori Seçiniz</option>
                @foreach (var c in categories)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </InputSelect>
        </div>

        <div class="col-md-3">
            <InputSelect class="form-select" @bind-Value="model.LocationId">
                <option value="">Lokasyon Seçiniz</option>
                @foreach (var loc in locations)
                {
                    <option value="@loc.Id">@loc.Name</option>
                }
            </InputSelect>
        </div>

        <div class="col-md-3">
            <InputText class="form-control" placeholder="Marka" @bind-Value="model.Brand" />
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-2">
            <InputText class="form-control" placeholder="Model" @bind-Value="model.Model" />
        </div>
        <div class="col-md-2">
            <InputText class="form-control" placeholder="Seri No" @bind-Value="model.SerialNumber" />
        </div>
        <div class="col-md-2">
            <InputText class="form-control" placeholder="Plaka" @bind-Value="model.PlateNumber" />
        </div>
        <div class="col-md-2">
            <InputNumber class="form-control" @bind-Value="model.ModelYear" placeholder="Model Yılı" />
        </div>
        <div class="col-md-2">
            <InputNumber class="form-control" @bind-Value="model.CurrentKM" placeholder="KM" />
        </div>
        <div class="col-md-2">
            <InputNumber class="form-control" @bind-Value="model.WorkingHours" placeholder="Çalışma Saati" />
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-3">
            <label>Son Bakım Tarihi</label>
            <InputDate class="form-control" @bind-Value="model.LastMaintenanceDate" />
        </div>
        <div class="col-md-3">
            <label>Bakım Aralığı (gün)</label>
            <InputNumber class="form-control" @bind-Value="model.MaintenanceInterval" />
        </div>
        <div class="col-md-3 form-check mt-4">
            <InputCheckbox class="form-check-input" @bind-Value="model.IsActive" />
            <label class="form-check-label ms-2">Aktif</label>
        </div>
        <div class="col-md-3">
            <label>Açıklama</label>
            <InputTextArea class="form-control" @bind-Value="model.Description" Rows="2" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">@((model.Id == 0) ? "Kaydet" : "Güncelle")</button>
    @if (model.Id != 0)
    {
        <button class="btn btn-secondary ms-2" type="button" @onclick="Cancel">İptal</button>
    }
</EditForm>

<hr />
<button class="btn btn-info mb-2" @onclick="ToggleList">Listeyi Göster/Gizle</button>

@if (showList)
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-light">
                <tr>
                    <th>Ad</th>
                    <th>Kategori</th>
                    <th>Lokasyon</th>
                    <th>Marka</th>
                    <th>Model</th>
                    <th>Plaka</th>
                    <th>Yıl</th>
                    <th>Durum</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in list)
                {
                    <tr>
                        <td>@a.Name</td>
                        <td>@a.Category?.Name</td>
                        <td>@a.Location?.Name</td>
                        <td>@a.Brand</td>
                        <td>@a.Model</td>
                        <td>@a.PlateNumber</td>
                        <td>@a.ModelYear</td>
                        <td>@(a.IsActive ? "Aktif" : "Pasif")</td>
                        <td>
                            <button class="btn btn-sm btn-warning" @onclick="() => Edit(a)">Düzenle</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => Delete(a.Id)">Sil</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private Asset model = new();
    private List<Asset> list = new();
    private List<AssetCategory> categories = new();
    private List<Location> locations = new();
    private bool showList;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        categories = await _context.AssetCategories.AsNoTracking().OrderBy(c => c.Name).ToListAsync();
        locations = await _context.Locations.AsNoTracking().OrderBy(l => l.Name).ToListAsync();
    }

    private async Task ToggleList()
    {
        if (!showList)
            list = await _context.Assets
                .Include(a => a.Category)
                .Include(a => a.Location)
                .OrderBy(a => a.Name)
                .ToListAsync();

        showList = !showList;
    }

    private async Task Save()
    {
        if (model.Id == 0)
            _context.Assets.Add(model);
        else
        {
            var local = _context.Assets.Local.FirstOrDefault(a => a.Id == model.Id);
            if (local != null)
                _context.Entry(local).State = EntityState.Detached;

            _context.Assets.Update(model);
        }

        await _context.SaveChangesAsync();
        message = "Kayıt başarıyla kaydedildi.";
        model = new();
        list = await _context.Assets.Include(a => a.Category).Include(a => a.Location).ToListAsync();
        showList = true;
    }

    private void Edit(Asset item)
    {
        model = new()
        {
            Id = item.Id,
            Name = item.Name,
            Brand = item.Brand,
            Model = item.Model,
            SerialNumber = item.SerialNumber,
            PlateNumber = item.PlateNumber,
            CurrentKM = item.CurrentKM,
            WorkingHours = item.WorkingHours,
            ModelYear = item.ModelYear,
            LastMaintenanceDate = item.LastMaintenanceDate,
            MaintenanceInterval = item.MaintenanceInterval,
            CategoryId = item.CategoryId,
            LocationId = item.LocationId,
            Description = item.Description,
            IsActive = item.IsActive
        };
    }

    private async Task Delete(int id)
    {
        var entity = await _context.Assets.FindAsync(id);
        if (entity != null)
        {
            _context.Assets.Remove(entity);
            await _context.SaveChangesAsync();
            list = await _context.Assets.Include(a => a.Category).Include(a => a.Location).ToListAsync();
        }
    }

    private void Cancel()
    {
        model = new();
        message = null;
    }
}
