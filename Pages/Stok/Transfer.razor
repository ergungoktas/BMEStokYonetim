@page "/stok/transfer"
@using BMEStokYonetim.Data
@using BMEStokYonetim.Data.Entities
@using Microsoft.AspNetCore.Components.Forms
@inject ApplicationDbContext _context
@inject IUserContextService UserContext
@inject IStockService StockService

<h3>Depolar Arası Transfer</h3>

@if (isLoading)
{
    <p><em>Yükleniyor...</em></p>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Ürün</label>
                <InputSelect class="form-select" TValue="int?" @bind-Value="model.ProductId" @onchange="async e => await OnProductChanged(int.Parse(e.Value.ToString()))">
                    <option value="">Ürün seçiniz</option>
                    @foreach (var product in products)
                    {
                        <option value="@product.Id">@product.Code - @product.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-3">
                <label class="form-label">Kaynak Depo</label>
                <InputSelect class="form-select" TValue="int?" @bind-Value="model.FromWarehouseId">
                    <option value="">Depo seçiniz</option>
                    @foreach (var warehouse in warehouses)
                    {
                        <option value="@warehouse.Id">@warehouse.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-3">
                <label class="form-label">Hedef Depo</label>
                <InputSelect class="form-select" TValue="int?" @bind-Value="model.ToWarehouseId">
                    <option value="">Depo seçiniz</option>
                    @foreach (var warehouse in warehouses)
                    {
                        <option value="@warehouse.Id" disabled="@(warehouse.Id == model.FromWarehouseId)">@warehouse.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-3">
                <label class="form-label">Miktar</label>
                <InputNumber TValue="int" class="form-control" @bind-Value="model.Quantity" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Evrak No</label>
                <InputText class="form-control" @bind-Value="model.DocumentNumber" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Açıklama</label>
                <InputTextArea class="form-control" rows="2" @bind-Value="model.Description" />
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-primary" type="submit">Transfer Et</button>
        </div>
    </EditForm>
}

@code {
    private List<Product> products = new();
    private List<Warehouse> warehouses = new();
    private TransferModel model = new();
    private EditContext? editContext;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        products = await _context.Products.OrderBy(p => p.Name).ToListAsync();
        warehouses = await _context.Warehouses.OrderBy(w => w.Name).ToListAsync();
        editContext = new EditContext(model);
        isLoading = false;
    }

    private async Task OnProductChanged(int? productId)
    {
        model.ProductId = productId;
        await Task.CompletedTask;
    }

    private async Task HandleValidSubmit()
    {
        var userId = await UserContext.GetCurrentUserIdAsync();
        if (string.IsNullOrEmpty(userId))
            return;

        await StockService.TransferAsync(model.ProductId!.Value, model.Quantity, model.FromWarehouseId!.Value, model.ToWarehouseId!.Value, userId, model.DocumentNumber, model.Description);
    }

    private class TransferModel
    {
        public int? ProductId { get; set; }
        public int? FromWarehouseId { get; set; }
        public int? ToWarehouseId { get; set; }
        public int Quantity { get; set; }
        public string DocumentNumber { get; set; } = string.Empty;
        public string? Description { get; set; }
    }
}
